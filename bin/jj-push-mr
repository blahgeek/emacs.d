#!/usr/bin/env bash -e

run_jj() {
    echo -e "\033[31m[exec]\033[0m jj $*"
    jj "$@"
}

info() {
    echo -e "\033[34m[info]\033[0m $*"
}

REVS="$1"
USER="${JJ_PUSH_MR_USERNAME:-$USER}"

_existing_mr_branches=($(jj log --no-graph -r "$REVS" -T 'local_bookmarks.filter(|x| x.name().contains("/jj-mr-")).map(|x| x.name() ++ " ")'))

if [[ "${#_existing_mr_branches[@]}" == 0 ]]; then
  ROOT_CHANGE_ID="$(jj log --no-graph -r "roots($REVS)" -T 'change_id.short()')"
  _description_as_branch_part="$(jj log --no-graph -r "${ROOT_CHANGE_ID}" -T 'description.first_line()' | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | cut -c1-42)"
  SOURCE_BRANCH="${USER}/${_description_as_branch_part}/jj-mr-${ROOT_CHANGE_ID}"
elif [[ "${#_existing_mr_branches[@]}" == 1 ]]; then
  SOURCE_BRANCH="${_existing_mr_branches[0]}"
  ROOT_CHANGE_ID="${SOURCE_BRANCH##*-}"
  REVS="${ROOT_CHANGE_ID}::$(jj log --no-graph -r "heads($REVS)" -T 'change_id.short()')"
else
  info "Multiple existing source branch found in given revisions, abort"
  exit 1
fi

echo
jj log -r "$REVS"
echo
info "Root change id: $ROOT_CHANGE_ID"
info "Source branch:  $SOURCE_BRANCH"
read -rp "Continue? [y/N] " ans && [[ ${ans,,} == y* ]] || exit 1

run_jj bookmark set --allow-backwards -r "heads($REVS)" "${SOURCE_BRANCH}"
run_jj git push -N -b "${SOURCE_BRANCH}"

TARGET_BRANCH="$(jj config get 'revset-aliases."trunk()"' | sed 's/@.*//')"
EXTRA_DESCRIPTION=""
_tmp_target_branch_name="${USER}/tmp-mr-target/jj-${ROOT_CHANGE_ID}"
run_jj bookmark delete "$_tmp_target_branch_name" 2> /dev/null || true
if [[ "$(jj log --no-graph -r "::trunk() & $ROOT_CHANGE_ID-")" == "" ]]; then
  TARGET_BRANCH="$_tmp_target_branch_name"
  run_jj bookmark set --allow-backwards -r "$ROOT_CHANGE_ID-" "$TARGET_BRANCH"
  run_jj git push -N -b "$TARGET_BRANCH"

  # collect dependencies
  for name in $(jj log --reversed --no-graph -r "::($ROOT_CHANGE_ID-) ~ ::trunk()" -T 'local_bookmarks.filter(|x| x.name().contains("/jj-mr-")).map(|x| x.name() ++ " ")'); do
    _mr_id="$(glab mr list --all -s "$name" -F json | jq '.[0].iid')"
    if [[ "$_mr_id" != "null" ]]; then
      EXTRA_DESCRIPTION="${EXTRA_DESCRIPTION}* !${_mr_id}+
"
    fi
  done
  [[ "$EXTRA_DESCRIPTION" == "" ]] && EXTRA_DESCRIPTION="(dependencies not pushed yet)
"
fi
info "Target branch: $TARGET_BRANCH"

MR_JSON_INFO="$(glab mr list --all -s "$SOURCE_BRANCH" -F json)"
MR_ID="$(echo "$MR_JSON_INFO" | jq '.[0].iid')"
if [[ "$MR_ID" == "null" ]]; then
  MR_DESCRIPTION="$(jj log --no-graph -r "$ROOT_CHANGE_ID" -T 'description.remove_prefix(description.first_line()).trim_start()')"
else
  MR_DESCRIPTION="$(echo "$MR_JSON_INFO" | jq -r '.[0].description' | sed '/<!-- jj-push-mr-desc-start -->/,/<!-- jj-push-mr-desc-end -->/d') "
fi
[[ "$EXTRA_DESCRIPTION" != "" ]] && MR_DESCRIPTION="${MR_DESCRIPTION}
<!-- jj-push-mr-desc-start -->
>>>
Do not merge yet. Depends on (oldest on top):
<sup>Created by <a href=\"https://dev.msh.team/-/snippets/200\">jujutsu</a>,
similar to <a href=\"https://dev.msh.team/yuxin/stacked-mr\">branchless & pushstack</a>
<a href=\"#\" title=\"I must cite this to make ci-check-mr.py work, like user-agent...\">(?)</a>.
This section will be removed before merging.</sup>

${EXTRA_DESCRIPTION}
>>>
<!-- jj-push-mr-desc-end -->"

info "Description: ${MR_DESCRIPTION}"

if [[ "$MR_ID" == "null" ]]; then
  info "MR not found, creating new one"
  glab mr create -s "$SOURCE_BRANCH" -b "$TARGET_BRANCH" \
    --remove-source-branch --squash-before-merge  \
    --title "$(jj log --no-graph -r "$ROOT_CHANGE_ID" -T 'description.first_line()')" \
    --description "${MR_DESCRIPTION}"
else
  info "MR found (!$MR_ID), updating"
  glab mr update "$MR_ID" \
    --target-branch "$TARGET_BRANCH" \
    --description "${MR_DESCRIPTION:- }"
fi
